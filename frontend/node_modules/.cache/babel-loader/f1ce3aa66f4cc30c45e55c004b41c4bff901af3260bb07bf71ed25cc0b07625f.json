{"ast":null,"code":"var _jsxFileName = \"/Users/vivektumuluri/Downloads/tempo/frontend/src/components/Calendar/Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, Paper, Grid, IconButton, Badge, Drawer, List, ListItem, ListItemText, Chip, CircularProgress, ToggleButton, ToggleButtonGroup, Divider } from '@mui/material';\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, addMonths, subMonths, startOfWeek, endOfWeek, eachHourOfInterval, startOfDay, endOfDay, addDays, parseISO, isWithinInterval } from 'date-fns';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport CalendarViewMonthIcon from '@mui/icons-material/CalendarViewMonth';\nimport CalendarViewDayIcon from '@mui/icons-material/CalendarViewDay';\nimport axios from 'axios';\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://127.0.0.1:5000';\nfunction Calendar() {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [view, setView] = useState('month');\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    setLoading(true);\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get(`${API_URL}/tasks`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setTasks(response.data);\n    } catch (err) {\n      console.error('Failed to fetch tasks:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getDaysInMonth = () => {\n    const start = startOfMonth(currentDate);\n    const end = endOfMonth(currentDate);\n    return eachDayOfInterval({\n      start,\n      end\n    });\n  };\n  const getTasksForDate = date => {\n    return tasks.filter(task => task.due_date && isSameDay(new Date(task.due_date), date));\n  };\n  const handleDateClick = date => {\n    setSelectedDate(date);\n    setDrawerOpen(true);\n  };\n\n  // Update the priorityColors to match the image's color scheme\n  const priorityColors = {\n    high: '#E91E63',\n    // Pink\n    medium: '#2196F3',\n    // Blue\n    low: '#9C27B0',\n    // Purple\n    default: '#00BCD4' // Teal\n  };\n  const renderDayView = () => {\n    const hours = eachHourOfInterval({\n      start: startOfDay(selectedDate || new Date()),\n      end: endOfDay(selectedDate || new Date())\n    });\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      transition: {\n        duration: 0.3\n      },\n      style: {\n        height: 'calc(100vh - 160px)'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          height: '100%',\n          display: 'grid',\n          gridTemplateColumns: 'repeat(7, 1fr)',\n          gap: 1,\n          overflow: 'hidden',\n          backgroundColor: '#1E1E1E',\n          borderRadius: 2,\n          p: 2\n        },\n        children: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              mb: 2,\n              px: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                color: '#fff',\n                fontWeight: 500\n              },\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              sx: {\n                color: '#fff',\n                backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                '&:hover': {\n                  backgroundColor: 'rgba(255, 255, 255, 0.2)'\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                children: \"Copy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: 1,\n              display: 'grid',\n              gridTemplateRows: 'repeat(16, 1fr)',\n              gap: 0.5,\n              position: 'relative',\n              borderLeft: '1px solid rgba(255, 255, 255, 0.1)'\n            },\n            children: [hours.map(hour => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                borderBottom: '1px solid rgba(255, 255, 255, 0.1)',\n                position: 'relative',\n                height: '60px'\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                sx: {\n                  position: 'absolute',\n                  left: -40,\n                  top: -10,\n                  color: 'rgba(255, 255, 255, 0.5)',\n                  fontSize: '0.85rem'\n                },\n                children: format(hour, 'h a')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this)\n            }, hour.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }, this)), day === 'Wed' && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                position: 'absolute',\n                top: '36%',\n                left: 0,\n                right: 0,\n                height: '120px',\n                backgroundColor: 'rgba(33, 150, 243, 0.3)',\n                border: '1px solid #2196F3',\n                borderRadius: 1,\n                p: 1,\n                zIndex: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                sx: {\n                  color: '#2196F3',\n                  fontSize: '0.8rem',\n                  fontWeight: 500\n                },\n                children: \"Preferred time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                sx: {\n                  color: '#fff',\n                  fontSize: '0.9rem'\n                },\n                children: \"9:00 - 12:00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Update the month view task rendering\n  const renderMonthView = () => {\n    const start = startOfWeek(startOfMonth(currentDate));\n    const end = endOfWeek(endOfMonth(currentDate));\n    const days = eachDayOfInterval({\n      start,\n      end\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          mb: 2\n        },\n        children: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            align: \"center\",\n            sx: {\n              color: 'rgba(255, 255, 255, 0.7)',\n              fontSize: '0.9rem',\n              fontWeight: 500,\n              letterSpacing: '1px'\n            },\n            children: day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this)\n        }, day, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 0.5,\n        children: days.map(date => {\n          const tasksForDate = getTasksForDate(date);\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 1.714,\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              onClick: () => {\n                setSelectedDate(date);\n                setView('day');\n              },\n              sx: {\n                p: 1.5,\n                height: 120,\n                textAlign: 'left',\n                cursor: 'pointer',\n                background: 'rgba(30, 30, 30, 0.6)',\n                '&:hover': {\n                  background: 'rgba(40, 40, 40, 0.8)'\n                },\n                borderRadius: 1,\n                transition: 'all 0.2s ease-in-out',\n                opacity: isSameMonth(date, currentDate) ? 1 : 0.5\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                sx: {\n                  color: '#fff',\n                  fontSize: '0.9rem',\n                  mb: 1\n                },\n                children: format(date, 'd')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexDirection: 'column',\n                  gap: 0.5\n                },\n                children: tasksForDate.map((task, index) => index < 3 && /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    backgroundColor: `${priorityColors[task.priority] || priorityColors.default}`,\n                    color: '#fff',\n                    p: 0.8,\n                    borderRadius: 0.5,\n                    fontSize: '0.8rem',\n                    whiteSpace: 'nowrap',\n                    overflow: 'hidden',\n                    textOverflow: 'ellipsis'\n                  },\n                  children: task.title\n                }, task.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this)\n          }, date.toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  const getTasksForHour = (date, hour) => {\n    return tasks.filter(task => {\n      if (!task.due_date) return false;\n      const taskDate = parseISO(task.due_date);\n      return isSameDay(taskDate, date) && taskDate.getHours() === hour;\n    });\n  };\n  const handleViewChange = (event, newView) => {\n    if (newView !== null) {\n      setView(newView);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      minHeight: 'calc(100vh - 64px)',\n      background: 'linear-gradient(135deg, #0A0A0F 0%, #1a1a1f 100%)',\n      py: 6,\n      px: 4,\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0,\n        scale: 0.95\n      },\n      animate: {\n        opacity: 1,\n        scale: 1\n      },\n      transition: {\n        duration: 0.5,\n        ease: \"easeOut\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 0,\n        sx: {\n          p: 4,\n          background: 'rgba(17, 17, 17, 0.6)',\n          backdropFilter: 'blur(20px)',\n          borderRadius: 4,\n          border: '1px solid rgba(255, 255, 255, 0.1)',\n          maxWidth: 1200,\n          width: '100%',\n          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.2)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mb: 5,\n            justifyContent: 'space-between',\n            px: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => setCurrentDate(subMonths(currentDate, 1)),\n              sx: {\n                background: 'rgba(255, 255, 255, 0.05)',\n                '&:hover': {\n                  background: 'rgba(220, 20, 60, 0.1)'\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n                sx: {\n                  color: '#fff'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              sx: {\n                color: '#fff',\n                fontWeight: 600,\n                letterSpacing: '-0.5px',\n                background: 'linear-gradient(45deg, #fff, rgba(255, 255, 255, 0.7))',\n                WebkitBackgroundClip: 'text',\n                WebkitTextFillColor: 'transparent'\n              },\n              children: view === 'month' ? format(currentDate, 'MMMM yyyy') : format(selectedDate || new Date(), 'MMMM d, yyyy')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => setCurrentDate(addMonths(currentDate, 1)),\n              sx: {\n                background: 'rgba(255, 255, 255, 0.05)',\n                '&:hover': {\n                  background: 'rgba(220, 20, 60, 0.1)'\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n                sx: {\n                  color: '#fff'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n            value: view,\n            exclusive: true,\n            onChange: handleViewChange,\n            sx: {\n              '& .MuiToggleButton-root': {\n                color: '#fff',\n                borderColor: 'rgba(255, 255, 255, 0.1)',\n                '&.Mui-selected': {\n                  backgroundColor: 'rgba(220, 20, 60, 0.2)',\n                  color: '#DC143C'\n                }\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n              value: \"month\",\n              children: /*#__PURE__*/_jsxDEV(CalendarViewMonthIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n              value: \"day\",\n              children: /*#__PURE__*/_jsxDEV(CalendarViewDayIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), view === 'month' ? renderMonthView() : renderDayView()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Drawer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n}\n_s(Calendar, \"2/JPT7p87lYU7Wg96UFaxBMcoFg=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","Paper","Grid","IconButton","Badge","Drawer","List","ListItem","ListItemText","Chip","CircularProgress","ToggleButton","ToggleButtonGroup","Divider","format","startOfMonth","endOfMonth","eachDayOfInterval","isSameMonth","isSameDay","addMonths","subMonths","startOfWeek","endOfWeek","eachHourOfInterval","startOfDay","endOfDay","addDays","parseISO","isWithinInterval","ChevronLeftIcon","ChevronRightIcon","CalendarViewMonthIcon","CalendarViewDayIcon","axios","motion","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","Calendar","_s","currentDate","setCurrentDate","Date","tasks","setTasks","loading","setLoading","selectedDate","setSelectedDate","drawerOpen","setDrawerOpen","view","setView","fetchTasks","token","localStorage","getItem","response","get","headers","data","err","console","error","getDaysInMonth","start","end","getTasksForDate","date","filter","task","due_date","handleDateClick","priorityColors","high","medium","low","default","renderDayView","hours","div","initial","opacity","animate","transition","duration","style","height","children","sx","display","gridTemplateColumns","gap","overflow","backgroundColor","borderRadius","p","map","day","flexDirection","justifyContent","alignItems","mb","px","color","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","size","variant","flex","gridTemplateRows","position","borderLeft","hour","borderBottom","left","top","fontSize","toString","right","border","zIndex","renderMonthView","days","container","spacing","item","xs","align","letterSpacing","tasksForDate","onClick","textAlign","cursor","background","index","priority","whiteSpace","textOverflow","title","id","getTasksForHour","taskDate","getHours","handleViewChange","event","newView","minHeight","py","scale","ease","elevation","backdropFilter","maxWidth","width","boxShadow","WebkitBackgroundClip","WebkitTextFillColor","value","exclusive","onChange","borderColor","_c","$RefreshReg$"],"sources":["/Users/vivektumuluri/Downloads/tempo/frontend/src/components/Calendar/Calendar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Typography, \n  Paper,\n  Grid,\n  IconButton,\n  Badge,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  Chip,\n  CircularProgress,\n  ToggleButton,\n  ToggleButtonGroup,\n  Divider\n} from '@mui/material';\nimport { \n  format, \n  startOfMonth, \n  endOfMonth, \n  eachDayOfInterval,\n  isSameMonth,\n  isSameDay,\n  addMonths,\n  subMonths,\n  startOfWeek,\n  endOfWeek,\n  eachHourOfInterval,\n  startOfDay,\n  endOfDay,\n  addDays,\n  parseISO,\n  isWithinInterval\n} from 'date-fns';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport CalendarViewMonthIcon from '@mui/icons-material/CalendarViewMonth';\nimport CalendarViewDayIcon from '@mui/icons-material/CalendarViewDay';\nimport axios from 'axios';\nimport { motion } from 'framer-motion';\n\nconst API_URL = 'http://127.0.0.1:5000';\n\nfunction Calendar() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [view, setView] = useState('month');\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    setLoading(true);\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get(`${API_URL}/tasks`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setTasks(response.data);\n    } catch (err) {\n      console.error('Failed to fetch tasks:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getDaysInMonth = () => {\n    const start = startOfMonth(currentDate);\n    const end = endOfMonth(currentDate);\n    return eachDayOfInterval({ start, end });\n  };\n\n  const getTasksForDate = (date) => {\n    return tasks.filter(task => \n      task.due_date && isSameDay(new Date(task.due_date), date)\n    );\n  };\n\n  const handleDateClick = (date) => {\n    setSelectedDate(date);\n    setDrawerOpen(true);\n  };\n\n  // Update the priorityColors to match the image's color scheme\n  const priorityColors = {\n    high: '#E91E63', // Pink\n    medium: '#2196F3', // Blue\n    low: '#9C27B0', // Purple\n    default: '#00BCD4' // Teal\n  };\n\n  const renderDayView = () => {\n    const hours = eachHourOfInterval({\n      start: startOfDay(selectedDate || new Date()),\n      end: endOfDay(selectedDate || new Date())\n    });\n\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.3 }}\n        style={{ height: 'calc(100vh - 160px)' }}\n      >\n        <Box sx={{ \n          height: '100%',\n          display: 'grid',\n          gridTemplateColumns: 'repeat(7, 1fr)',\n          gap: 1,\n          overflow: 'hidden',\n          backgroundColor: '#1E1E1E',\n          borderRadius: 2,\n          p: 2,\n        }}>\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n            <Box key={day} sx={{ display: 'flex', flexDirection: 'column' }}>\n              <Box sx={{ \n                display: 'flex', \n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2,\n                px: 1\n              }}>\n                <Typography sx={{ color: '#fff', fontWeight: 500 }}>{day}</Typography>\n                <IconButton\n                  size=\"small\"\n                  sx={{ \n                    color: '#fff',\n                    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                    '&:hover': { backgroundColor: 'rgba(255, 255, 255, 0.2)' }\n                  }}\n                >\n                  <Typography variant=\"caption\">Copy</Typography>\n                </IconButton>\n              </Box>\n              \n              <Box sx={{ \n                flex: 1,\n                display: 'grid',\n                gridTemplateRows: 'repeat(16, 1fr)',\n                gap: 0.5,\n                position: 'relative',\n                borderLeft: '1px solid rgba(255, 255, 255, 0.1)'\n              }}>\n                {hours.map((hour) => (\n                  <Box\n                    key={hour.toString()}\n                    sx={{\n                      borderBottom: '1px solid rgba(255, 255, 255, 0.1)',\n                      position: 'relative',\n                      height: '60px'\n                    }}\n                  >\n                    <Typography \n                      sx={{ \n                        position: 'absolute',\n                        left: -40,\n                        top: -10,\n                        color: 'rgba(255, 255, 255, 0.5)',\n                        fontSize: '0.85rem',\n                      }}\n                    >\n                      {format(hour, 'h a')}\n                    </Typography>\n                  </Box>\n                ))}\n                \n                {/* Example Preferred time block */}\n                {day === 'Wed' && (\n                  <Box\n                    sx={{\n                      position: 'absolute',\n                      top: '36%',\n                      left: 0,\n                      right: 0,\n                      height: '120px',\n                      backgroundColor: 'rgba(33, 150, 243, 0.3)',\n                      border: '1px solid #2196F3',\n                      borderRadius: 1,\n                      p: 1,\n                      zIndex: 1\n                    }}\n                  >\n                    <Typography sx={{ color: '#2196F3', fontSize: '0.8rem', fontWeight: 500 }}>\n                      Preferred time\n                    </Typography>\n                    <Typography sx={{ color: '#fff', fontSize: '0.9rem' }}>\n                      9:00 - 12:00\n                    </Typography>\n                  </Box>\n                )}\n              </Box>\n            </Box>\n          ))}\n        </Box>\n      </motion.div>\n    );\n  };\n\n  // Update the month view task rendering\n  const renderMonthView = () => {\n    const start = startOfWeek(startOfMonth(currentDate));\n    const end = endOfWeek(endOfMonth(currentDate));\n    const days = eachDayOfInterval({ start, end });\n\n    return (\n      <>\n        <Grid container spacing={2} sx={{ mb: 2 }}>\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n            <Grid item xs key={day}>\n              <Typography\n                align=\"center\"\n                sx={{ \n                  color: 'rgba(255, 255, 255, 0.7)',\n                  fontSize: '0.9rem',\n                  fontWeight: 500,\n                  letterSpacing: '1px',\n                }}\n              >\n                {day}\n              </Typography>\n            </Grid>\n          ))}\n        </Grid>\n\n        <Grid container spacing={0.5}>\n          {days.map((date) => {\n            const tasksForDate = getTasksForDate(date);\n            return (\n              <Grid item xs={1.714} key={date.toString()}>\n                <Paper\n                  onClick={() => {\n                    setSelectedDate(date);\n                    setView('day');\n                  }}\n                  sx={{\n                    p: 1.5,\n                    height: 120,\n                    textAlign: 'left',\n                    cursor: 'pointer',\n                    background: 'rgba(30, 30, 30, 0.6)',\n                    '&:hover': {\n                      background: 'rgba(40, 40, 40, 0.8)',\n                    },\n                    borderRadius: 1,\n                    transition: 'all 0.2s ease-in-out',\n                    opacity: isSameMonth(date, currentDate) ? 1 : 0.5,\n                  }}\n                >\n                  <Typography sx={{\n                    color: '#fff',\n                    fontSize: '0.9rem',\n                    mb: 1,\n                  }}>\n                    {format(date, 'd')}\n                  </Typography>\n                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\n                    {tasksForDate.map((task, index) => index < 3 && (\n                      <Box\n                        key={task.id}\n                        sx={{\n                          backgroundColor: `${priorityColors[task.priority] || priorityColors.default}`,\n                          color: '#fff',\n                          p: 0.8,\n                          borderRadius: 0.5,\n                          fontSize: '0.8rem',\n                          whiteSpace: 'nowrap',\n                          overflow: 'hidden',\n                          textOverflow: 'ellipsis',\n                        }}\n                      >\n                        {task.title}\n                      </Box>\n                    ))}\n                  </Box>\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </>\n    );\n  };\n\n  const getTasksForHour = (date, hour) => {\n    return tasks.filter(task => {\n      if (!task.due_date) return false;\n      const taskDate = parseISO(task.due_date);\n      return isSameDay(taskDate, date) && taskDate.getHours() === hour;\n    });\n  };\n\n  const handleViewChange = (event, newView) => {\n    if (newView !== null) {\n      setView(newView);\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        minHeight: 'calc(100vh - 64px)',\n        background: 'linear-gradient(135deg, #0A0A0F 0%, #1a1a1f 100%)',\n        py: 6,\n        px: 4,\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.5, ease: \"easeOut\" }}\n      >\n        <Paper\n          elevation={0}\n          sx={{\n            p: 4,\n            background: 'rgba(17, 17, 17, 0.6)',\n            backdropFilter: 'blur(20px)',\n            borderRadius: 4,\n            border: '1px solid rgba(255, 255, 255, 0.1)',\n            maxWidth: 1200,\n            width: '100%',\n            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.2)',\n          }}\n        >\n          <Box sx={{ \n            display: 'flex', \n            alignItems: 'center', \n            mb: 5, \n            justifyContent: 'space-between',\n            px: 2 \n          }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n              <IconButton \n                onClick={() => setCurrentDate(subMonths(currentDate, 1))}\n                sx={{\n                  background: 'rgba(255, 255, 255, 0.05)',\n                  '&:hover': {\n                    background: 'rgba(220, 20, 60, 0.1)',\n                  }\n                }}\n              >\n                <ChevronLeftIcon sx={{ color: '#fff' }} />\n              </IconButton>\n              <Typography variant=\"h4\" sx={{ \n                color: '#fff', \n                fontWeight: 600,\n                letterSpacing: '-0.5px',\n                background: 'linear-gradient(45deg, #fff, rgba(255, 255, 255, 0.7))',\n                WebkitBackgroundClip: 'text',\n                WebkitTextFillColor: 'transparent',\n              }}>\n                {view === 'month' \n                  ? format(currentDate, 'MMMM yyyy')\n                  : format(selectedDate || new Date(), 'MMMM d, yyyy')}\n              </Typography>\n              <IconButton \n                onClick={() => setCurrentDate(addMonths(currentDate, 1))}\n                sx={{\n                  background: 'rgba(255, 255, 255, 0.05)',\n                  '&:hover': {\n                    background: 'rgba(220, 20, 60, 0.1)',\n                  }\n                }}\n              >\n                <ChevronRightIcon sx={{ color: '#fff' }} />\n              </IconButton>\n            </Box>\n            \n            <ToggleButtonGroup\n              value={view}\n              exclusive\n              onChange={handleViewChange}\n              sx={{\n                '& .MuiToggleButton-root': {\n                  color: '#fff',\n                  borderColor: 'rgba(255, 255, 255, 0.1)',\n                  '&.Mui-selected': {\n                    backgroundColor: 'rgba(220, 20, 60, 0.2)',\n                    color: '#DC143C',\n                  }\n                }\n              }}\n            >\n              <ToggleButton value=\"month\">\n                <CalendarViewMonthIcon />\n              </ToggleButton>\n              <ToggleButton value=\"day\">\n                <CalendarViewDayIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Box>\n\n          {view === 'month' ? renderMonthView() : renderDayView()}\n        </Paper>\n      </motion.div>\n\n      <Drawer>\n        {/* ... Drawer content ... */}\n      </Drawer>\n\n      {loading && (\n        <Box>\n          {/* ... Loading content ... */}\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default Calendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}